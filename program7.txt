#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item {
    int weight;
    int value;
};

int discreteKnapsack(vector<Item>& items, int capacity) {
    sort(items.begin(), items.end(), [](const Item& a, const Item& b) {
        return (double)a.value / a.weight > (double)b.value / b.weight;
    });

    int totalValue = 0;
    int currentWeight = 0;

    for (const Item& item : items) {
        if (currentWeight + item.weight <= capacity) {
            currentWeight += item.weight;
            totalValue += item.value;
        }
    }

    return totalValue;
}

double continuousKnapsack(vector<Item>& items, int capacity) {
    sort(items.begin(), items.end(), [](const Item& a, const Item& b) {
        return (double)a.value / a.weight > (double)b.value / b.weight;
    });

    double totalValue = 0.0;
    int currentWeight = 0;

    for (const Item& item : items) {
        if (currentWeight + item.weight <= capacity) {
            currentWeight += item.weight;
            totalValue += item.value;
        } else {
            int remainingCapacity = capacity - currentWeight;
            totalValue += (double)item.value / item.weight * remainingCapacity;
            break;
        }
    }

    return totalValue;
}

int main() {
    vector<Item> items;
    int n, capacity;

    cout << "Enter the number of items: ";
    cin >> n;
    cout << "Enter the capacity of knapsack: ";
    cin >> capacity;

    cout << "Enter the weight and value of each item:" << endl;
    for (int i = 0; i < n; i++) {
        Item item;
        cout << "Item " << i + 1 << ": ";
        cin >> item.weight >> item.value;
        items.push_back(item);
    }

    int discreteResult = discreteKnapsack(items, capacity);
    cout << "Maximum value for discrete knapsack: " << discreteResult << endl;

    double continuousResult = continuousKnapsack(items, capacity);
    cout << "Maximum value for continuous knapsack: " << continuousResult << endl;

    return 0;
}
