#include <stdio.h>
#include <stdlib.h>

struct Item {
    int weight;
    int value;
};

// Comparison function for sorting items based on value per unit weight
int compare(const void* a, const void* b) {
    double ratioA = (double)((struct Item*)a)->value / ((struct Item*)a)->weight;
    double ratioB = (double)((struct Item*)b)->value / ((struct Item*)b)->weight;
    return (ratioA < ratioB) - (ratioA > ratioB);
}

// Function to solve discrete knapsack using greedy approach
int discreteKnapsack(struct Item* items, int n, int capacity) {
    qsort(items, n, sizeof(struct Item), compare);

    int totalValue = 0;
    int currentWeight = 0;

    // Fill the knapsack with items
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        }
    }

    return totalValue;
}

// Function to solve continuous knapsack using greedy approach
double continuousKnapsack(struct Item* items, int n, int capacity) {
    qsort(items, n, sizeof(struct Item), compare);

    double totalValue = 0.0;
    int currentWeight = 0;

    // Fill the knapsack with items fractionally
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            int remainingCapacity = capacity - currentWeight;
            totalValue += (double)items[i].value / items[i].weight * remainingCapacity;
            break;
        }
    }

    return totalValue;
}

int main() {
    int n, capacity;

    // Input number of items and capacity of knapsack
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the capacity of knapsack: ");
    scanf("%d", &capacity);

    struct Item* items = (struct Item*)malloc(n * sizeof(struct Item));

    // Input the weight and value of each item
    printf("Enter the weight and value of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d %d", &items[i].weight, &items[i].value);
    }

    // Solve discrete knapsack problem
    int discreteResult = discreteKnapsack(items, n, capacity);
    printf("Maximum value for discrete knapsack: %d\n", discreteResult);

    // Solve continuous knapsack problem
    double continuousResult = continuousKnapsack(items, n, capacity);
    printf("Maximum value for continuous knapsack: %.2f\n", continuousResult);

    free(items);
    return 0;
}

