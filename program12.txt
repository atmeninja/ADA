#include <iostream>
#include <vector>

using namespace std;

void printSolution(const vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row)
            cout << " " << cell << " ";
        cout << endl;
    }
}

bool isSafe(const vector<vector<char>>& board, int row, int col) {
    int i, j;
    int n = board.size();

    for (i = 0; i < col; i++)
        if (board[row][i] == 'Q')
            return false;

    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 'Q')
            return false;

    for (i = row, j = col; j >= 0 && i < n; i++, j--)
        if (board[i][j] == 'Q')
            return false;

    return true;
}

bool solveNQUtil(vector<vector<char>>& board, int col) {
    int n = board.size();
    if (col >= n)
        return true;

    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 'Q';

            if (solveNQUtil(board, col + 1))
                return true;

            board[i][col] = '-';
        }
    }

    return false;
}

void solve4Queens() {
    int n = 4;
    vector<vector<char>> board(n, vector<char>(n, '-'));

    if (!solveNQUtil(board, 0)) {
        cout << "Solution does not exist" << endl;
        return;
    }

    printSolution(board);
}

int main() {
    cout << "Solution for 4 Queens problem:" << endl;
    solve4Queens();
    return 0;
}
